# Convolutional Neural Network
# Tackling the issue of Radio Diffusion Obstacles 
# Goal: Train a model using Computer Vision and Satelite images to establish a referential spatial disposition of ducks, where WiFi is working
# Train the AI model to recognize this referential spatial disposition of ducks on any satelite image, regardless of geographical model


# -*- coding: utf-8 -*-
"""
@author: Florent
"""


# Part 1 - Building the CNN

# Importing the Keras libraries and packages
from keras.models import Sequential
from keras.layers import Convolution2D
from keras.layers import MaxPooling2D
from keras.layers import Flatten
from keras.layers import Dense

# Initialising the CNN
classifier = Sequential()

# Step 1 - Convolution
classifier.add(Convolution2D(40, 4, 4, input_shape = (64, 64, 3), activation = 'relu')) # Extraction of the matrix of features aka features of the WiFi working of ducks disposition on map

# Step 2 - Pooling
classifier.add(MaxPooling2D(pool_size = (2, 2))) # Making sure that the geographic variance in the Satellite images won't affect the result

# Adding a second convolutional layer
classifier.add(Convolution2D(32, 3, 3, activation = 'relu'))
classifier.add(MaxPooling2D(pool_size = (2, 2)))

# Step 3 - Flattening  
classifier.add(Flatten())

# Step 4 - Full connection  # Turning the model into an Artificial Neural Network
classifier.add(Dense(output_dim = 130, activation = 'relu'))
classifier.add(Dense(output_dim = 1, activation = 'sigmoid'))

# Compiling the CNN
classifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])

# Part 2 - Fitting the CNN to the images

from keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(rescale = 1./255,
                                   shear_range = 0.2,
                                   zoom_range = 0.2,
                                   horizontal_flip = True)

test_datagen = ImageDataGenerator(rescale = 1./255)

training_set = train_datagen.flow_from_directory('dataset/training_set', # The directory where I stored satelite images on my Computer
                                                 target_size = (103, 103),
                                                 batch_size = 32,
                                                 class_mode = 'binary')

test_set = test_datagen.flow_from_directory('dataset/test_set',
                                            target_size = (103, 103),
                                            batch_size = 32,
                                            class_mode = 'binary')

classifier.fit_generator(training_set,
                         samples_per_epoch = 10000,
                         nb_epoch = 25,
                         validation_data = test_set,
                         nb_val_samples = 2000)

# Part 3 Making New Prediction
import numpy as np
from keras.preprocessing import image
test_image = image.load_img('dataset/predict/Working_or_NotWorking.jpg', target_size = (64,64)) # Teaching the AI to establish a model of Working ducks spatial disposition
test_image = image_to_array(test_image)
test_image = np.expand_dims(test_image, axis =0)
result = classifier.predict(test_image)
training_set.class_indices
if result[0][0] ==1:
    prediction = 'Working' #WiFi
else:
    prediction = 'NotWorking'  #WiFi
