## This replace potential employees due to its recursive nature, it doesn't need break, it can work indefinitely


# Importing the libraries which will be used
from selenium import webdriver
from selenium.webdriver.common.keys import Keys

# Defining the adequate indentation that will be used in the backend throughout the process
def print_same_line(text):
    sys.stdout.write(text)
    sys.stdout.flush()
    sys.stdout.write('\r')
    sys.stdout.flush()

# Defining the class
class InstagramBot:

    def __init__(self, username, password):  # self is an encapsulation module, it contains, transport various characteristics of the class
        self.username = username
        self.password = password
        self.driver = webdriver.Chrome() # Defining the browser. It is possible to use Firefox as well
    # Urgently close the browser if the program comes across any irregularity such as an unexpected element on the website
    def closeBrowser(self):
        self.driver.close()
    # Implementation of the login button
    def login(self):
        driver = self.driver # Open the Browser and connect to Internet
        driver.get("https://www.instagram.com/") # Go to Instagrams website
        time.sleep(2) # Keep emulating the human's behavior by not processing too fast
        login_button = driver.find_element_by_xpath("//a[@href='/accounts/login/?source=auth_switcher']") # Reaching to the login button, according to its Xpath
        login_button.click() # Clicking on the login button
        time.sleep(2)
        user_name_elem = driver.find_element_by_xpath("//input[@name='username']")
        user_name_elem.clear() # Clear anything that has been previously written on the username box

        passworword_elem.clear() # Clear anything that has been previously written on the password box
        time.sleep(2)

    # Creation of the automation including scrolling down and clicking on the like button
    def like_photo(self, hashtag):
        time.sleep(2) # Time to sleep between different moves so the bot will mimic the human

        # Gathering photos
        pic_hrefs = []
        for i in range(1, 7): # Generating a random number
            try:
                driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
                time.sleep(2)
                # Getting tags based on the hrefs HTML element
                hrefs_in_view = driver.find_elements_by_tag_name('a')
                # Finding relevant hrefs
                hrefs_in_view = [elem.get_attribute('href') for elem in hrefs_in_view
                                 if '.com/p/' in elem.get_attribute('href')]
                # Building list of unique photos
                [pic_hrefs.append(href) for href in hrefs_in_view if href not in pic_hrefs]

            except Exception:
                continue



## END OF THE CODES
